Core Concepts of Git

A version control system (VCS) enables changes within files such as device configuration files, code files, documentation files, or text files to be recorded and tracked over time. Git is a version control system that is most often used with software code but also works well with text files. Git has the ability to store a timeline
of different versions of files over time. The stored records can be used to restore files to their previous versions. Another feature provided by Git is the ability to 
modify and maintain multiple versions of the same file simultaneously. Maintaining one version of a file while modifying another version of the same file is a common occurrence
in software development; for example, the working version of the file - production code - is maintained while new features are added and modified in a separate version of
the file until the features are ready to be merged into production. 

The Git commit graph depicts the timeline of changes to files through version snapshots called commits. The graph begins with the git repository which is a directory
that has been converted to a repository using the “git init” command. The changes or additions within the repository are noted in red between the different commits. 
In figure 1, the first change made to the repository is adding two files, F1 and F2. Then a commit is made which is represented in the figure by an oval - saving a record of
the repository at this time. The second change made is editing F1 and this change is followed by another commit. The commit will store a record of the state of both 
F1 and F2 at the time of the commit - F1 will include the new changes made to it and F2 will be the same as the version stored in the previous commit. The third change made
is removing F2 from the repository and doing another commit. The third commit will store the same version of F1 as the second commit did, but will have no record of F2 because
it was removed. At any point, the repository can be restored to the state and file version recorded in a previous commit. For example, if it is decided that after making commit
three which removed F2 that the original versions of both F1 and F2 are needed, the original versions can be checked out from the first commit made after the files were added.
The Git commit graph in figure 1 would continue on to illustrate all the commits made in the repository.

There are three areas where work may be completed with files in Git - the working tree, the staging area, and the Git history. The working tree is what can be seen in the file
directory and is where files can be added, deleted, or edited. The staging area provides users with the ability to control which changes made in the working tree are committed.
Any changes that should be saved in the next commit should be added to the staging area. The changes not present in the staging area will not be included in the commit, but can 
always be moved into the staging area at a later time to be included in future commits. For example, if changes were made to F1, F2, and F3 in the working tree represented in red
in figure 2 and only the changes to F1 and F3 need to be saved, those changes should be included in the staging area, again represented in red. The next commit would include the
changes made to F1 and F3 as well as the original version of F2 since F2’s changes were not added to the staging area. The Git history is the same as the Git commit graph in
figure 1 as it stores a record of every commit made of various file versions. The Git history is found in the “.git” directory which is a hidden directory containing an object
database and metadata that makes up the repository.

Creating and working with a git repository

The first step to set up a Git repository is to install git on the machine which can be done with various install commands depending on the system. The second step is to create
a directory - a normal file folder on the machine - to house the project and repository. After making the directory, it can be made into a repository and to hold a Git project 
using the “git init” command. Initializing the repository creates the “.git” subdirectory in the project directory. As explained in figure 2, the directory made on the machine
is considered to be the working tree and the “.git” subdirectory is the Git history. The third step is to configure the Git with a Git username and email so that all commits
include information regarding the name and email of the user who made the commit; this allows repository contributors to track who made what changes to the project. The configuration
can be completed using “git config” commands and should be done before any commits are made.

An important command when working with Git is the “git status” command. The “git status” command will indicate the state of files in the working tree and the staging area. File
additions that have not been added to the staging area will be listed as “untracked”. Untracked files can be added to the staging area using the “git add” command. After running
the “git add” command, the file and the changes to the file added will be listed as “changes to be committed” in the staging area and will be included in the next commit. Another
important command is the “git commit” command. As previously explained, the “git commit” command will save a record of the files and any staged changes at the time of the commit.
Adding the “-m” option to the commit command allows users to add a short message to the commit which is usually used to describe what changes are included in the commit; omitting 
the “-m” will open up the machine’s default text editor to allow for the inclusion of a more detailed commit message. The output of the “git commit” command will include a portion
of a hash as every commit made will have a unique SHA-1 hash value. A commonly used Git command is the “git log” command. The “git log” command will output the log of commits 
made to the repository which is a textual representation of the Git commit graph from figure 1. The “git log” command will show the commit hash, author name, author email, 
commit timestamp, and commit message. Adding the “-p” option to the “git log” command will also show the changes made in each commit.

Files that have previously been committed and have now been edited will be tracked and performing a “git status” will display the file under “changes not staged for commit”. 
The file shows as being “not staged for commit” because it is being tracked but the changes have not yet been added to the staging area using the “git add” command. Therefore, 
the staging area still has the version of the file from the previous commit that has not been edited. The “git diff” command can be used to see the difference between the tracked
file in the working tree and the unedited file from the previous commit that is in the staging area. The “git diff” output will show additions to the file in green and deletions 
from the file in red. If the changed file is added to the staging area using “git add”, the “--staged” option can be added to the “git diff” command to see the difference between
the staged file and the version of the file in the most recent commit.

A file can be removed from a repository using the “git rm” command. The “git rm” command will remove the file from the working tree and the staging area. The command will also 
stage the removal of the file under “changes to be committed”. Unwanted changes in the working tree can be removed using the “git checkout -- <file>” command. The checkout command
will replace the edited version of the file in the working tree with the version of the file that is in the staging area. Once the “git checkout” command has been run and the
file has been replaced, there is no way to recover the changes that were replaced and removed because the changes were not committed. Changes can be removed from the staging
area using the “git reset HEAD <file>” command. The command will replace the file in the staging area with the version of the file from the most recent commit. The reset command
will not replace the file in the working tree, therefore the file in the working tree will still contain the changes. File changes can be undone by restoring a file from an 
earlier commit. The “git log” command can be used to determine which commit the file should be restored from. Once the hash of the specific commit has been retrieved, the
“git checkout <commit hash> -- <file>” command can be used to restore the file to the version from the specific commit.

Within almost all projects, there will be files for which changes do not need to be tracked by Git. Files that do not need to be tracked may include log files, non critical artifacts,
or compiled code. A “.gitignore” file can be used to indicate specific files, types of files, or specific directories that Git should not track. Each line in the “.gitignore”
file indicates an additional file to ignore. Once files are added to the “.gitignore” file, the files will no longer show up when a “git status” command is run. The “.gitignore”
file needs to be added to the staging area and committed after it is created.

Branching and Merging

Branches are used to enable parallel work on multiple versions of the same files. Any changes made on one branch will be independent from all work completed on other branches
until the branches are merged. Individual branches are often used for different, specific purposes; for example, within one repository, there could be a production branch, a 
development branch, and a branch for bug fixes. A branch points to the SHA-1 hash of a commit. When a repository is initialized, Git automatically creates a master branch which
is the main branch for the repository. If work is being completed on the master branch, the branch will always move up and point to the most recent commit. Another feature of
Git is the HEAD pointer which points to a branch, specifically the branch that is checked out and being worked on. Using “git log --all --decorate --oneline --graph” will show
the commit history with information about which branch is currently checked out and which commit the branch is on.

Branches can be created using the “git branch” command followed by the name of the new branch. Branches will be created at the same point as the HEAD pointer. Therefore, following
the creation of the branches, all of the branches will point to the same commit. The “git branch” command on its own will display a list of all the branches in the repository. 
The branch that is currently checked out and HEAD is pointing to will be indicated with an asterisk and green font.

Checkout and work on branches

A branch can be checked out using the “git checkout” command followed by the branch name. Checking out a branch will make the HEAD pointer point to the newly checked out branch.
A branch can be created and checked out at the same time using the “git checkout -b <branch>” command. When a commit is made on the checked out branch, only the branch that
is checked out will point to the new commit. The other branches will continue to point at the commits they currently point at. So if one of the other branches was checked out 
after the commit was made, the changes committed on the previous branch will not be present. If all branches are checked out at some point and commits are made, each branch can
end up pointing at different commits and the file version may be different on each branch.

Merging branches

A merge is completed using the “git merge” command followed by a branch name. If there is a direct path between two branches, a fast-forward merge can be completed. A fast-forward
merge will move the checked out branch which is behind the branch specified in the merge command by one or more commits to point at the same commit as the specified branch. 
The output of the merge command will indicate that a fast-forward merge was completed. If there is not a direct path between two branches, a 3-way merge will be completed. A 
3-way merge is completed by merging the two branches into a new commit called a merge commit. Git will create the merge commit by looking at the base commit the two branches 
branched out from and the last commit on each of the branches. The 3-way merge is initiated the same way as a fast-forward merge by using the “git merge” command. Since the 
3-way merge is completed as a merge commit, it needs a commit message; Git will provide a default message or the message can be customized. 

Deleting branches

When work on a branch is completed and the branch is no longer needed, the branch can be deleted. To verify that another branch’s commits have been merged with the checked out 
branch, the “git branch” command can be used with the “--merged” option. Running the command will output a list of the branches that are merged with the checked out branch. A
branch can be deleted using the “git branch -d <branch>” command. If the branch is fully merged, Git will delete the branch from the repository. If the branch has not been merged, 
the branch will not be deleted and a warning stating that the branch has not been fully merged will be displayed. It is possible to delete a branch that is not fully merged by
using the uppercase “-D” option on the delete command instead of the lowercase option. Using the “-D” command will delete an unmerged branch, ultimately losing all the work 
completed on that branch.

Merge Conflicts

A merge conflict will occur when a merge is attempted with branches that have made changes to the same lines in the same files. When a line has only been changed on one branch
but not the other branch, the change will win and will be included in the merge commit. If the same line has undergone different changes on each branch, a conflict will occur 
because Git will not know which change to include in the merge commit. A conflict will not occur if the same line experiences the same change on both branches. When a merge 
conflict occurs, a message will be displayed indicating that a conflict is present. Running the “git status” command will show the unmerged paths and the files that have been 
modified by both branches. Git will modify the files with conflicts to show where the conflicts are and what varies on each of the branches. The contents of one branch will be 
separated from the contents of another branch will be separated by a line of equal signs. After choosing which changes to keep, files should be edited to keep the wanted changes
as well as to remove the conflict identifiers and unwanted changes. The files in which conflicts have been fixed need to be staged and committed in order to continue with the 
merge. If all the merge conflicts have been fixed, the merge commit will be created and the merge will be complete. A merge can be aborted by using the “git merge --abort” command.

Detached HEAD

The HEAD pointer usually points to a branch rather than pointing to a commit. The detached HEAD state occurs when HEAD does point to a commit. The detached HEAD state can happen
when a commit is checked out rather than a branch. One way to get out of the detached HEAD state is to checkout a branch. Checking out a branch will make the HEAD pointer point to 
the checked out branch rather than the commit. Another way to get out of the detached HEAD state is to make a new branch pointing to the commit and then check out the new branch.
When you create a new branch, the branch will point to the same commit that HEAD is pointing at but HEAD will not be attached to the branch; checking out the new branch will make
HEAD point at the new branch and will get out of the detached HEAD state.

Stashing changes

The “git stash” command can be used to get the working tree to a clean state with no changes. The stash command will save any changes in the working tree so they can be applied
later and then clean the working tree. A message to provide detail about what changes are included in the stash can be added using the “git stash save” command followed by the
stash message. The “git stash list” will display a list of the stashed changes and adding the “-p” option will display the changes included in each stash. Stashing changes is 
useful when changes are not ready to be committed but need to be saved to clean the working tree. Git will prevent checking out branches unless the working tree is clean because
checking out a different branch would erase the unsaved changes on the current branch. Stashed changes can be re-applied using the “git stash apply” command. The “git stash apply”
command will apply the changes from the most recent stash. If a specific stash is needed, the stash can be re-applied using the “git stash apply” command followed by the label
of the specific stash. The stashed changes will not be removed from the stash list after they have been re-applied, so stashes can be re-applied as many times as needed. However, 
using the “git stash pop” command instead of the “git stash apply command” will apply the changes and then remove the stash from the list.

