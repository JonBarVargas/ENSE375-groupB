What is Git?
	Git is a type of Version Control System (VCS), a tool which enables maintenance of a digital body of work (most often but not exclusively, code) by multiple collaborators in a peer-to-peer network setting.

The history of Git
	The history of Git dates back to 2005, at the time the Linux kernel had a larger amount of collaborators compared to other operating systems. A VCS was in order. The Linux kernel community managed their code between CVS and BitKeeper. The creation of Git was developed after BitMover, BitKeeper’s parent company decided to revoke the licenses of core linux developers. Linus Torvalds spearheaded the development of Git and set three main design goals for the open source VCS:    
	Support for distributed workloads
	Offer safeguards against content corruption
	High-performance

	Monotone, another open-source distributed VCS, which was started in 2003, was likely another inspiration during the early development of Git. Before I move on any further, I would just like to explain what a distributed version control system does:
	Provides an ability for offline work and incremental commits
	Allows a collaborator to know when their work is ready for sharing
	Allows offline access to the repository change history
	Allows work to be published to multiple repositories, with varying differences in branches and changes.

	Today a development team can use a number of open source distributed VCS. Bazaar, Darcs, Fossil, Git, Mercurial (will be discussed in section 2), and Veracity are all commonly used and widely supported.


Version Control System Design
	We will start off with first getting a grasp of the functionalities of a VCS, namely:
	Storing content
	Tracking changes of the content
	Distributing the content and its history with collaborators (not a requirement for all VCS’s)

Content storage
	There are two design choices when it comes to content storage: delta-based changeset, or directed acyclic graph.
	Delta-based changesets represent the differences between two versions of the content and its metadata.
	Directed acyclic graphs represent the content with objects forming a hierarchy mirroring the content’s filesystem tree. Git is written with the directed acyclic graph method.

Commit and merge histories
	Again, there are two different approaches to achieve this:
	Linear history
	Directed acyclic graph (DAG)
	Git uses a DAG to store its history and enable full branching capability. Every commit contains metadata about its ancestors, and can have an unlimited number of parent commits.  DAG nodes(commits) cannot depend on itself or its children nodes. This is what is meant by acyclic, and the directed means that we can only move from parent to child.

	These rules mean that a node can have 3 special features. Firstly a node can have no parents, making it a root. It can have more than one parent, forcing a merge. And it can have no children, making it a head node. These special cases can be viewed in the figure below.

	Using a DAG is useful in facilitating the benefits of a distributed VCS, such as having accessible backups, easy and consistent branching or merging, as well as maintaining a history of relationships between all the local commits.

Distribution
	There are three ways to handle content distribution to collaborators:
	Local-only (used with VCS’s which don’t have a content distribution requirement)
	Central server: all changes to a repo must transact through one specific central repo. See Figure 1.
	Distributed model: there are publicly accessible repositories for collaborators to push to, however commits can be made locally, worked on offline, and pushed later. This is how Git operates. See Figure 2.

Toolkit
	The Git ecosystem consists of many command line and GUI tools on multiple Operating Systems. Since Git was originally built in Linux, and for Linux, it was written with a toolkit design philosophy similar to the Unix tradition of command line tools. The toolkit is split into two parts:
	Plumbing: these are low-level commands which enable content-tracking and DAG graph manipulation. Think of this as, well, the plumbing system in your home.
	Porcelain: this is the smaller subset of various end-user “git” commands used for maintenance and communication between repos. In contrast to ‘plumbing’, this will be whatever attaches to the plumbing, such as the sink or toilet (funnily enough, both of these are usually made from porcelain).

Object Database
	Git contains four basic primitive objects which every type of content in the repo is built on, with each object type containing three attributes: type, size and content. The four objects are:
	Tree: an element of a tree can be another tree, or a blob
	Blob: a blob represents a file stored in the repo
	Commit: this points to a tree representing the top-level directory for that particular commit, as well as parent commits
	Tag: a named identifier that points to a commit in the repo history which the tag represents

	All object primitives are referenced by a secure hash algorithm (SHA) , a 40-digit object identity which has the following properties:
	Two identical objects will have the same SHA
	Two different objects will have different SHA’s
	If an object got corrupted, recalculating the SHA will identify the corruption

--------------------------------------------------------------------------------

Video 4: How to Add Collaborator to Repository in GitHub:

	Adding collaborators to a repo from within GitHub is easy following these steps:
	1) Log into your GitHub and access the repository you would like to add members to.
	2) In the repo navigation ribbon, on the far right click on “Settings”.
	3) In the new page, on the left side you should see a navigation bar with more options. Click on “Manage access” here.
	4) At the bottom of the page you should see a green button “Invite a collaborator”, so click here.
	5) Here you can search for collaborators by their username, name, or email. Once you’ve selected a collaborator, click on the green “Add <collaborator> to <repo_name>”.
	6) From here you can see the status of your collaborators (invite sent, accepted, or expired), and you can add or remove new/existing collaborators from here.
